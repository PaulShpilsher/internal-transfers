// Code generated by MockGen. DO NOT EDIT.
// Source: internal-transfers/internal/db (interfaces: AccountRepositoryPort)

// Package mocks is a generated GoMock package.
package mocks

import (
	db "internal-transfers/internal/db"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockAccountRepositoryPort is a mock of AccountRepositoryPort interface.
type MockAccountRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryPortMockRecorder
}

// MockAccountRepositoryPortMockRecorder is the mock recorder for MockAccountRepositoryPort.
type MockAccountRepositoryPortMockRecorder struct {
	mock *MockAccountRepositoryPort
}

// NewMockAccountRepositoryPort creates a new mock instance.
func NewMockAccountRepositoryPort(ctrl *gomock.Controller) *MockAccountRepositoryPort {
	mock := &MockAccountRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepositoryPort) EXPECT() *MockAccountRepositoryPortMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockAccountRepositoryPort) BeginTx() (db.TransactionPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx")
	ret0, _ := ret[0].(db.TransactionPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockAccountRepositoryPortMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockAccountRepositoryPort)(nil).BeginTx))
}

// CreateAccount mocks base method.
func (m *MockAccountRepositoryPort) CreateAccount(arg0 int64, arg1 decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepositoryPortMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepositoryPort)(nil).CreateAccount), arg0, arg1)
}

// GetAccountBalance mocks base method.
func (m *MockAccountRepositoryPort) GetAccountBalance(arg0 db.TransactionPort, arg1 int64) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockAccountRepositoryPortMockRecorder) GetAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockAccountRepositoryPort)(nil).GetAccountBalance), arg0, arg1)
}

// UpdateAccountBalance mocks base method.
func (m *MockAccountRepositoryPort) UpdateAccountBalance(arg0 db.TransactionPort, arg1 int64, arg2 decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountBalance indicates an expected call of UpdateAccountBalance.
func (mr *MockAccountRepositoryPortMockRecorder) UpdateAccountBalance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalance", reflect.TypeOf((*MockAccountRepositoryPort)(nil).UpdateAccountBalance), arg0, arg1, arg2)
}
