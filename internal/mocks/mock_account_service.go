// Code generated by MockGen. DO NOT EDIT.
// Source: internal-transfers/internal/services (interfaces: AccountServicePort)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "internal-transfers/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockAccountServicePort is a mock of AccountServicePort interface.
type MockAccountServicePort struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServicePortMockRecorder
}

// MockAccountServicePortMockRecorder is the mock recorder for MockAccountServicePort.
type MockAccountServicePortMockRecorder struct {
	mock *MockAccountServicePort
}

// NewMockAccountServicePort creates a new mock instance.
func NewMockAccountServicePort(ctrl *gomock.Controller) *MockAccountServicePort {
	mock := &MockAccountServicePort{ctrl: ctrl}
	mock.recorder = &MockAccountServicePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountServicePort) EXPECT() *MockAccountServicePortMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountServicePort) CreateAccount(arg0 model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountServicePortMockRecorder) CreateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountServicePort)(nil).CreateAccount), arg0)
}

// GetAccount mocks base method.
func (m *MockAccountServicePort) GetAccount(arg0 int64) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountServicePortMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountServicePort)(nil).GetAccount), arg0)
}

// Transfer mocks base method.
func (m *MockAccountServicePort) Transfer(arg0, arg1 int64, arg2 decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockAccountServicePortMockRecorder) Transfer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockAccountServicePort)(nil).Transfer), arg0, arg1, arg2)
}
