// Code generated by MockGen. DO NOT EDIT.
// Source: internal-transfers/internal/db (interfaces: TransactionPort)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionPort is a mock of TransactionPort interface.
type MockTransactionPort struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionPortMockRecorder
}

// MockTransactionPortMockRecorder is the mock recorder for MockTransactionPort.
type MockTransactionPortMockRecorder struct {
	mock *MockTransactionPort
}

// NewMockTransactionPort creates a new mock instance.
func NewMockTransactionPort(ctrl *gomock.Controller) *MockTransactionPort {
	mock := &MockTransactionPort{ctrl: ctrl}
	mock.recorder = &MockTransactionPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionPort) EXPECT() *MockTransactionPortMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransactionPort) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionPortMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransactionPort)(nil).Commit))
}

// Rollback mocks base method.
func (m *MockTransactionPort) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionPortMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransactionPort)(nil).Rollback))
}
